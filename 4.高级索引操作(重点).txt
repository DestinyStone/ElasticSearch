方式
	1.url(不推荐， 能查询的方式很差)     2.DSL(推荐)

2.  DSL
以下内容默认写在   GET /persion/_search{}  中              # 注意这里是  /persion/_search

注意： 
1. es在存储时会把字母都转化为小写
2. keyword匹配时， 不分词，  即 小明 匹配 王小明(text) 会匹配的到，  小明 匹配 王小明(keyword) 匹配不到
3. 查询本质， 使用value 去索引区中进行匹配
----------------查询操作---------------------------------------------------------
查询所有
	"query": {"match_all": {}}
匹配查询
	“query”: {"match":{"arg": "value"} }

trem查询(这里涉及到分词器的使用， 默认使用标准分词器， 英文单词分词， 中文单字分词)
	适用于字段本身不分词， 也就是 除text外的其他字段
	“query”:{
		"trem":{"name":{"value": "zs"}}
	}
范围查询(可用于价格区间， 如淘宝的价格选项)
	“query”:{
		"range":{"arg":{"gte":0, "lte":10}}    #加了e是大于等于， 不加e如 gt是大于
	}
前缀查询(区分大小写， 会去匹配分词器的各个分词， 类似于 like “value%”查询)
	“query”:{
		"prefix":{"arg":{"value":"zs"}}
	}
通配符匹配查询(*所有， ？单个)
	“query”:{
		"wildcard":{"arg":{"value":"sp*g"}}
	}
id查询
	“query”:{
		"ids":{"values":["id1", "id2"]}
	}
模糊查询(默认允许出现最大错误距离为2， 单词长度在0,2之间不允许有错误， 长度3，5之间允许有错误， 长度大于5， 只允许有2个错误 )
	“query”:{
		“fuzzy”:{"args":"spoog"}
	}
多字段查询(会根据查询字段来决定是否进行分词查询， 如果字段只包含keyword 则整体查询， 如果字段包含了key 则分词查询)
	“query”:{
		“multi_match”:{
			"query": "中国",
			"fields":["arg1", "arg2"]
		}
	}
多字段分词查询（可指定分词器）
	"query":{
		"query_string":{
			"query": "spring",
			"fields":["arg1", "arg2"],
			"analyzer": "指定的分词器"
		}
	}
----------------其他操作---------------------------------------------------------
返回指定条数
	“size”: 3
返回索引页数(从0开始 可结合 size做分页查询)
	"from": 0

查询结果返回指定字段
	“_source”:["arg1", "arg2"]


排序操作  (如果排序字段为text类型的话， 会报错， 优先级比size高，即会先排序在获取指定条数)
	“sort”: [{
		"id":{"order": "desc"}
	}]

高亮操作(生成新的文档， 使用<em></em> 标注，  标准， 对基于搜索的字段即获取到的文档进行在分词)
	"highlight":{
		"fields":{"args1":{}},            //*代表所有字段
		"pre_tags":["<em>"],     包含前缀
		"post_tags":["/em"]       包含后缀
		“require_field_match”: false      //关闭只对搜索字段进行分词
		"number_of_fragments": 0   //如果不设置该项的话， 高亮返回字段默认以 fragments_size 为标准
					当超出size时， 会经行隔片操作， 变成多个数组中的元素
					设置为0时，将返回一整个内容
	}

---------------bool查询(重点， 可组合多种查询)-----------------------------------------------------------
1. 表达式        must: &&                solud  ||                   must_not  !        filter 过滤出来  
2.使用
”query“:{
	"bool":{
		"filter": {                                             //适用于谷歌搜索手机时 下面的标签选择
  		      "term":{
     			     "age": "100"
      		       }
  		 },
		"must":[{
			"trem":{"name":{"value": "zs"}}
		}],
		"must_not":[{
			"ids":{"values":[1]}                      //排除掉id == 1的
		}]
	}
}




